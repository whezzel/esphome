esphome:
  name: ${devicename}

esp8266:
  board: esp01_1m
#  restore_from_flash: true

packages:
  captive_portal: !include /config/common/captive_portal.yaml
  logger: !include /config/common/logger.yaml
  mqtt: !include /config/common/mqtt.yaml
  ota: !include /config/common/ota.yaml
  sensor: !include /config/common/sensor.yaml
  switch: !include /config/common/switch.yaml
  text_sensor: !include /config/common/text_sensor.yaml
  time: !include /config/common/time.yaml
  web_server: !include /config/common/web_server.yaml
  wifi: !include /config/common/wifi.yaml

switch:
  - platform: gpio
    name: ${room} ${channel_1}
    pin: GPIO4
    id: light
    icon: ${icon1}
    restore_mode: ALWAYS_ON
  - platform: gpio
    name: ${room} ${channel_2}
    pin: GPIO15
    id: fan
    icon: ${icon2}
    restore_mode: ALWAYS_ON

i2c:
  sda: GPIO12
  scl: GPIO14

sensor:
  - platform: ade7953
    irq_pin: GPIO16
    update_interval: ${update_time}
    voltage:
      name: ${room} ${device} Voltage
    current_a:
      name: ${room} ${channel_2} Current
    current_b:
      name: ${room} ${channel_1} Current
    active_power_a:
      name: ${room} ${channel_2} Power
      id: power_channel_2
      filters:
        - multiply: 1
        - lambda: |-
            if (x >= 0) return x;
            else x=0; return x;
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: light
#            - homeassistant.service:
#                service: persistent_notification.create
#                data:
#                  title: Message from ${devicename}
#                data_template:
#                  message: Switch turned off because power exceeded ${max_power}W
    active_power_b:
      name: ${room} ${channel_1} Power
      id: power_channel_1
      filters:
        - multiply: -1
        - lambda: |-
            if (x >= 0) return x;
            else x=0; return x;
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: fan
#            - homeassistant.service:
#                service: persistent_notification.create
#                data:
#                  title: Message from ${devicename}
#                data_template:
#                  message: Switch turned off because power exceeded ${max_power}W
  - platform: total_daily_energy
    name: ${room} ${channel_1} Energy
    power_id: power_channel_1
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
  - platform: total_daily_energy
    name: ${room} ${channel_2} Energy
    power_id: power_channel_2
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh
  - platform: ntc
    sensor: temp_resistance_reading
    name: ${room} ${device} Temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
#          - switch.turn_off: light
          - switch.turn_off: fan
#          - homeassistant.service:
#              service: persistent_notification.create
#              data:
#                title: Message from ${devicename}
#              data_template:
#                message: Switch turned off because temperature exceeded ${max_temp}°C
      - below: ${thres_temp}
        then:
          - switch.turn_on: fan
#          - homeassistant.service:
#              service: persistent_notification.create
#              data:
#                title: Message from ${devicename}
#              data_template:
#                message: Fan turned on because temperature is below ${thres_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0
    update_interval: ${update_time}

status_led:
  pin:
    number: GPIO0
    inverted: yes

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
    id: ${channel_1}_input
    on_state:
      then:
        - logger.log: Single-Click Detected
        - if:
            condition:
              text_sensor.state:
                id: light_state
                state: 'off'
            then:
              mqtt.publish:
                topic: remote/${light_group}/command
                payload: 'on'
            else:
              mqtt.publish:
                topic: remote/${light_group}/command
                payload: 'off'
  - platform: gpio
    pin:
      number: GPIO5
    id: ${channel_2}_input
    filters:
      - delayed_off: 3s

text_sensor:
  - platform: mqtt_subscribe
    id: light_state
    topic: ha-core/light/${light_group}/state
